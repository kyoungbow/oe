package com.recyclebin.controller;

import static org.junit.Assert.assertNotNull;
import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.util.List;

import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.context.SecurityContext;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.test.context.support.WithMockUser;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.springframework.test.context.web.WebAppConfiguration;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;
import org.springframework.ui.ModelMap;
import org.springframework.web.context.WebApplicationContext;
import org.springframework.web.servlet.ModelAndView;

import lombok.Setter;
import lombok.extern.log4j.Log4j;

@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration({"file:src/main/webapp/WEB-INF/spring/root-context.xml",
	"file:src/main/webapp/WEB-INF/spring/appServlet/servlet-context.xml",
	"file:src/main/webapp/WEB-INF/spring/security-context.xml"})
@WebAppConfiguration
@Log4j
public class ChatControllerTests {
	@Setter @Autowired
	private WebApplicationContext ctx;
	private MockMvc mvc;
	
    @Retention(RetentionPolicy.RUNTIME)
    @WithMockUser(username="test1", password="1234", roles = "ROLE_MEMBER")
    public @interface WithUser{}
    
	@Before
	public void setup() {
		mvc = MockMvcBuilders.webAppContextSetup(ctx).build();		
	}
	
	@Test
	public void testExists() {
		assertNotNull(ctx);
		assertNotNull(mvc);
		log.info(ctx);
		log.info(mvc);
	}
	
	// 채팅방 목록 확인
	@Test
	@WithUser
	public void testGetChatRooms() throws Exception {
		ModelMap map = mvc.perform(MockMvcRequestBuilders.get("/chat/rooms"))
				.andExpect(status().is3xxRedirection())
				.andReturn()
				.getModelAndView()
				.getModelMap();
				
		List<?> list= (List<?>)map.get("list");
		list.forEach(log::info);;
	}
	
	// 채팅 내역 확인
	@Test
	@WithUser
	public void testGetChatting() throws Exception {
		ModelMap map = mvc.perform(MockMvcRequestBuilders.get("/chat/rooms")
				.param("cno", "202"))
				.andReturn()
				.getModelAndView()
				.getModelMap();
		
		List<?> list= (List<?>)map.get("list");
		list.forEach(log::info);
	}
	
	
	
}
